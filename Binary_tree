import sys

import operator



class Stack:

    def __init__(self):

        self.items = []

    def is_empty(self):

        return self.items == []

    def push(self, item):

        self.items.append(item)

      

    def pop(self):

        return self.items.pop()

    def peek(self):

        return self.items[len(self.items)-1]

    def size(self):

        return len(self.items)



class BinaryTree:

    def __init__(self, root):

        self.key = root

        self.left_child = None

        self.right_child = None

    def insert_left(self, new_node):

        if self.left_child == None:

            self.left_child = BinaryTree(new_node)

        else:

            t = BinaryTree(new_node)

            t.left_child = self.left_child

            self.left_child = t

    def insert_right(self,new_node):

        if self.right_child == None:

            self.right_child = BinaryTree(new_node)

        else:

            t = BinaryTree(new_node)

            t.right_child = self.right_child

            self.right_child = t

    def get_right_child(self):

        

        return self.right_child

        

    def get_left_child(self):

        

        return self.left_child

        

    def set_root_val(self,obj):

        self.key = obj

    def get_root_val(self):

        return self.key

  



def build_parse_tree(fp_exp):

    fp_list = fp_exp.split()

    p_stack = Stack()

    e_tree = BinaryTree('')

    p_stack.push(e_tree)

    current_tree = e_tree

    for i in fp_list:

        if i == '(':

            current_tree.insert_left('')

            p_stack.push(current_tree)

            current_tree = current_tree.get_left_child()

        elif i not in ['+', '-', '*', '/',')']:

            current_tree.set_root_val(int(i))

            parent = p_stack.pop()

            current_tree = parent

        elif i in ['+', '-','*','/']:

            current_tree.set_root_val(i)

            current_tree.insert_right('')

            p_stack.push(current_tree)

            current_tree = current_tree.get_right_child()

        elif i == ')':

            current_tree = p_stack.pop()

        else:

            raise ValueError

    return e_tree





def evaluate(parse_tree):

    opers = { '+': operator.add,  '-':operator.sub, '*':operator.mul, '/':operator.truediv}

    left = parse_tree.get_left_child()

    right = parse_tree.get_right_child()

    if left and right:

        fn = opers[parse_tree.get_root_val()]

        print(fn)

        return fn(evaluate(left),evaluate(right))

    else:



        return parse_tree.get_root_val()



def preorder(tree):

    if tree:

        print (tree.get_root_val())

        preorder(tree.get_left_child())

        preorder(tree.get_right_child())

'''

    def preorder(self):

        print(self.key)

        if self.left_child:

            self.left.preorder()

        if slef.right_child:

            self.right.preorder()

'''



def postorder(tree):

    if tree != None:

        postorder(tree.get_left_child())

        postorder(tree.get_right_child())

        print(tree.get_root_val())



def postorder_eval(tree):

    opers = {'+':operator.add, '-':operator.sub,'*':operator.mul,'/':operator.truediv}

    res1 = None

    res2 = None

    if tree:

        res1 = postorder_eval(tree.get_left_child())

        res2 = postorder_eval(tree.get_right_child())

        if res1 and res2:

            return opers[tree.get_root_val()](res1,res2)

        else:

            return tree.get_root_val()



def inorder(tree):

    if tree != None:

        inorder(tree.get_left_child())

        print(tree.get_root_val())

        inorder(tree.get_right_child())



def print_exp(tree):

    str_val = ""

    if tree:

        str_val = '(' + print_exp(tree.get_left_child())

        str_val = str_val + str(tree.get_root_val())

        str_val = str_val + print_exp(tree.get_right_child()) + ')'

    return str_val



pt = build_parse_tree("( ( 10 + 5 ) * 3 )")

postorder(pt)

evaluate(pt)
